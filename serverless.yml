service: serverlessProject

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
#  profile: serverless
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: '*'
    - Effect: Allow
      Action:
        - ses:SendBulkTemplatedEmail
      Resource: '*'
    - Effect: Allow
      Action:
        - cognito-idp:ListUsers
      Resource: '*'
  apiGateway:
    apiKeys:
      - api-key
    usagePlan:
      quota:
        limit: 1000
        period: MONTH
      throttle:
        burstLimit: 10
        rateLimit: 10


package:
  exclude:
    - "**/node_modules/**"

custom:
  userTableName: user-details
  doctorTableName: doctor-details
  appointmentTableName: appointment-details
  frontendBucketName: serverless-frontend-1702743453
  s3Sync:
    - bucketName: ${self:custom.frontendBucketName}
      localDir: frontend/build/
  apiGatewayUrl:
  apiGatewayKey:
  emailSource: techflowhal2020@gmail.com  # set your email address
  template: appointmentReminderTemplate
  userPoolId: eu-north-1_dueh78bFU # set user pool id


plugins:
  - serverless-s3-sync

functions:
  userService:
    handler: backend.user.user.handler
    events:
      - http:
          path: user/
          method: POST
          cors: true
          private: true
      - http:
          path: user/{ID}
          method: GET
          cors: true
          private: true
      - http:
          path: user/{ID}
          method: PUT
          cors: true
  doctorService:
    handler: backend.doctor.doctor.handler
    events:
      - http:
          path: doctor
          method: GET
          cors: true
  appointmentService:
    handler: backend.appointment.appointment.handler
    events:
      - http:
          path: appointment/
          method: POST
          cors: true
      - http:
          path: appointment/{ID}
          method: GET
          cors: true
      - http:
          path: appointment/{ID}
          method: PUT
          cors: true
      - http:
          path: appointment/
          method: DELETE
          cors: true
      - http:
          path: appointment/sessions
          method: POST
          cors: true
  reminderService:
    handler: backend.reminder.reminder.handler
    environment:
      email_source: ${self:custom.emailSource}
      template: ${self:custom.template}
      user_pool_id: ${self:custom.userPoolId}
    events:
      - schedule:
          method: scheduler
          rate:
            - cron(0 0 * * ? *)
          timezone: Asia/Colombo
          input:
            triggerDate: <aws.scheduler.scheduled-time>


resources:
  Resources:
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.userTableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
            - AttributeName: ID
              KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    DoctorTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.doctorTableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    AppointmentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.appointmentTableName}
        AttributeDefinitions:
          - AttributeName: doctorId
            AttributeType: S
          - AttributeName: sessionDateTime
            AttributeType: S
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: doctorId
            KeyType: HASH
          - AttributeName: sessionDateTime
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: DateIndex
            KeySchema:
              - AttributeName: date
                KeyType: HASH
              - AttributeName: doctorId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: DoctorIndex
            KeySchema:
              - AttributeName: doctorId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
    ReactAppBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.frontendBucketName}
        AccessControl: Private
        PublicAccessBlockConfiguration:
            BlockPublicPolicy: false
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    S3AccessPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: ReactAppBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.frontendBucketName}/*
    CloudFront:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.frontendBucketName}.s3.amazonaws.com
              Id: ReactApp
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
          Enabled: true
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: ReactApp
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
    SESIdentity:
      Type: AWS::SES::EmailIdentity
      Properties:
        EmailIdentity: ${self:custom.emailSource}
    SESTemplate:
      Type: AWS::SES::Template
      Properties:
        Template:
          TemplateName: ${self:custom.template}
          HtmlPart: "<html><head><style>.out-box {    background-color: #F0F0F0;    padding-top: 3px;    padding-left: 10px;    padding-bottom: 20px;}.box {text-align: center;background-color: #F0F0F0;}</style></head><body><div class='out-box'><h3>Hi {{name}},</h3><div class='box'><p>You have scheduled an appointment with <b>{{doctor_name}}</b> for the session <b>{{today_date}}@{{session_time}}</b>.</p><br>APPOINTMENT NUMBER : <b>{{appointment_number}}</b><br>ESTIMATED APPOINTMENT TIME : <b>{{appointment_time}}</b></div></div></body></html>"
          SubjectPart: "REMINDER ON DOCTOR APPOINTMENT"
          TextPart: "Hi {{name}},\r\nYou have scheduled an appointment with Dr.{{doctor_name}} for the session {{today_date}}@{{session_time}}.\r\nAPPOINTMENT NUMBER : {{appointment_number}}\r\nESTIMATED APPOINTMENT TIME : {{appointment_time}}"
